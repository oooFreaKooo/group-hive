datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id          String    @id @db.VarChar(36) // Supabase Auth UUID
  displayName String?   @db.Text
  email       String?   @db.Text
  avatarUrl   String?   @db.Text
  bgUrl       String?   @db.Text
  role        UserRole  @default(USER)
  city        String?   @db.Text
  postalCode  String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  groupIds    String[] // References to groups the user is part of
  messages    Message[] @relation("MessageAuthor")
}

model Group {
  id             String   @id @default(cuid()) @db.VarChar(30)
  name           String   @db.Text
  description    String?  @db.Text
  invitationCode String   @unique @db.Text
  ownerId        String   @db.VarChar(36) // References the Profile id from Supabase
  city           String?  @db.Text
  postalCode     String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Task {
  id            String    @id @default(cuid()) @db.VarChar(30)
  description   String?   @db.Text
  dueDate       DateTime?
  completed     Boolean   @default(false)
  pointValue    Int       @default(0)
  groupId       String    @db.VarChar(30)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  assignedToId  String?   @db.VarChar(36) // References the Profile id from Supabase
  completedById String?   @db.VarChar(36) // References the Profile id from Supabase
  tags          TaskTag[]
  comments      Comment[]
}

model Message {
  id         String    @id @default(cuid()) @db.VarChar(30)
  content    String    @db.Text
  groupId    String    @db.VarChar(30)
  authorId   String    @db.VarChar(36) // References the Profile id from Supabase
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isEdited   Boolean   @default(false)
  replyToId  String?   @db.VarChar(30)
  mentionIds String[] // References to Profile ids
  author     Profile   @relation("MessageAuthor", fields: [authorId], references: [id])
  replyTo    Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies    Message[] @relation("MessageReplies")

  @@index([authorId])
  @@index([replyToId])
}

model Tag {
  id        String    @id @default(cuid()) @db.VarChar(30)
  title     String
  color     String
  groupId   String    @db.VarChar(30) // References the Group id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tasks     TaskTag[] // Relation to TaskTag join table

  @@unique([title, groupId])
}

// Join table for many-to-many relationship between Task and Tag
model TaskTag {
  taskId    String   @db.VarChar(30)
  tagId     String   @db.VarChar(30)
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@index([tagId])
  @@index([taskId])
}

model PointHistory {
  id        String   @id @default(cuid()) @db.VarChar(30)
  points    Int
  reason    String
  profileId String   @db.VarChar(36) // References the Profile id from Supabase
  groupId   String   @db.VarChar(30) // References the Group id
  taskId    String?  @db.VarChar(30) // References the Task id
  createdAt DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
}

// Add Comment model
model Comment {
  id        String   @id @default(cuid()) @db.VarChar(30)
  content   String
  taskId    String   @db.VarChar(30)
  authorId  String   @db.VarChar(36) // References the Profile id from Supabase
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
}

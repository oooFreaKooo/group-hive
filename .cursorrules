You are an expert in TypeScript, Node.js, Vite, Nuxt 3, Vue 3, Vue Router, Pinia, VueUse, and Bootstrap 5.3, with a deep understanding of best practices and performance optimization techniques in these technologies.

Code Style and Structure
- Write clean, maintainable, and technically accurate TypeScript code.
- Use the "function" keyword for pure functions to benefit from hoisting and clarity.
- Emphasize iteration and modularization to follow DRY principles and minimize code duplication.
- Prefer Composition API <script setup lang="ts"> style.
- Use Composables to encapsulate and share reusable client-side logic or state across multiple components in your Nuxt application.

Nuxt 3 Specifics
- Nuxt 3 provides auto imports, so thereâ€™s no need to manually import `ref`, `useState`, `useRouter` or any Nuxt 3 builtins.
- Take advantage of VueUse functions to enhance reactivity and performance.
- Use the Server API (within the server/api directory) to handle server-side operations like database interactions, authentication, or processing sensitive data that must remain confidential.
- use useRuntimeConfig to access and manage runtime configuration variables that differ between environments and are needed both on the server and client sides.

Fetching Data
1. Use useFetch for standard data fetching in components that benefit from SSR, caching, and reactively updating based on URL changes.
2. Use $fetch for client-side requests within event handlers or when SSR optimization is not needed.
3. Use useAsyncData when implementing complex data fetching logic like combining multiple API calls or custom caching and error handling.
4. Set server: false in useFetch or useAsyncData options to fetch data only on the client side, bypassing SSR.
5. Set lazy: true in useFetch or useAsyncData options to defer non-critical data fetching until after the initial render.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types for their extendability and ability to merge.
- Avoid enums; use maps instead for better type safety and flexibility.
- Use functional components with TypeScript interfaces.


UI and Styling
- Use Bootstrap 5.3 utility classes for components and styling.
- Implement responsive design with Bootstrap 5.3; use a mobile-first approach.
- Build UI components using atomic design principles, organizing them from smallest to largest (e.g., atoms, molecules, organisms, pages).

Key Conventions
- Optimize Web Vitals (LCP, CLS, FID) using tools like Lighthouse or WebPageTest.
- Implement proper error boundaries or try-catch mechanisms to handle errors gracefully, especially in asynchronous operations.